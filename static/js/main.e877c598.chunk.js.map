{"version":3,"sources":["App.css.ts","styles/fonts.ts","shared/components/Header/Header.css.ts","shared/components/Header/Header.tsx","App.tsx","reportWebVitals.ts","serviceWorker.js","index.tsx"],"names":["GlobalStyle","createGlobalStyle","MainAppSt","styled","div","PageHeader","HeaderLink","Link","HeaderTitleLink","HeaderLinks","Header","isPopularRotute","useRouteMatch","path","exact","isStartedRotute","to","PopularReposPage","React","lazy","StarredRepos","queryClient","QueryClient","App","Fragment","QueryClientProvider","client","fallback","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e877c598.chunk.js","sourcesContent":["import styled, { createGlobalStyle } from 'styled-components';\r\nimport { fonts } from './styles/fonts';\r\nexport const GlobalStyle = createGlobalStyle`\r\n${fonts}\r\n*,\r\n*::before,\r\n*::after {\r\n  box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n  background-color: #faebd7;\r\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\r\n    \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\r\n    sans-serif;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  color: #272727;\r\n  font-family: \"Quicksand\", serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  letter-spacing: 0;\r\n  padding: 0rem;\r\n}\r\n\r\ncode {\r\n  font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\",\r\n    monospace;\r\n}\r\n`;\r\n\r\n/* eslint-disable */\r\nexport const MainAppSt = styled.div`\r\n  padding: 5%;\r\n`;\r\n","// if needed, import custom fonts from assets\r\nexport const fonts = ``;","import styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const PageHeader = styled.div`\r\n  overflow: hidden;\r\n  background-color: rgb(197, 62, 85);\r\n  padding: 0.2rem 0.25rem;\r\n`;\r\n\r\nexport const HeaderLink = styled(Link)`\r\n  float: left;\r\n  color: rgb(218, 218, 218);\r\n  text-align: center;\r\n  padding: 0.75rem;\r\n  text-decoration: none;\r\n  font-size: 18px;\r\n  line-height: 1.5rem;\r\n  border-radius: 0.25rem;\r\n\r\n  &:hover {\r\n    background-color: #ddd;\r\n    color: black;\r\n  }\r\n  margin-right: 1rem;\r\n  @media screen and (max-width: 500px) {\r\n    float: none;\r\n    display: block;\r\n    text-align: left;\r\n  }\r\n`;\r\n\r\nexport const HeaderTitleLink = styled(HeaderLink)`\r\n  font-size: 25px;\r\n  font-weight: bold;\r\n`;\r\n\r\nexport const HeaderLinks = styled.div`\r\n  float: right;\r\n  display: flex;\r\n  flex-direction: row;\r\n  @media screen and (max-width: 500px) {\r\n    float: none;\r\n    flex-direction: column;\r\n  }\r\n`;\r\n","import { ReactElement } from 'react';\r\nimport {\r\n  HeaderLink,\r\n  HeaderLinks,\r\n  HeaderTitleLink,\r\n  PageHeader,\r\n} from './Header.css';\r\nimport { useRouteMatch } from 'react-router-dom';\r\nconst Header = (): ReactElement => {\r\n  const isPopularRotute = useRouteMatch({\r\n    path: '/popular',\r\n    exact: true,\r\n  });\r\n  const isStartedRotute = useRouteMatch({\r\n    path: '/stared',\r\n    exact: true,\r\n  });\r\n  return (\r\n    <PageHeader>\r\n      <HeaderTitleLink to=\"/popular\">\r\n        {isPopularRotute\r\n          ? 'Popular Repos'\r\n          : isStartedRotute\r\n          ? 'Starred Repos'\r\n          : 'Error'}\r\n      </HeaderTitleLink>\r\n      <HeaderLinks>\r\n        <HeaderLink to=\"/popular\">Popular Repos</HeaderLink>\r\n        <HeaderLink to=\"/stared\">Starred Repos</HeaderLink>\r\n      </HeaderLinks>\r\n    </PageHeader>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { Suspense } from 'react';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\nimport { GlobalStyle, MainAppSt } from './App.css';\nimport Header from './shared/components/Header/Header';\n\nconst PopularReposPage = React.lazy(\n  () => import('./containers/PopularRepos/PopularRepos')\n);\nconst StarredRepos = React.lazy(\n  () => import('./containers/StarredRepos/StarredRepos')\n);\nconst queryClient = new QueryClient();\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <GlobalStyle />\n      <Router>\n        <Header />\n        <MainAppSt>\n          <QueryClientProvider client={queryClient}>\n            <Suspense fallback={<div>Loading...</div>}>\n              <Switch>\n                <Route\n                  exact\n                  path=\"/popular\"\n                  render={() => <PopularReposPage />}\n                />\n                <Route exact path=\"/stared\" render={() => <StarredRepos />} />\n                <Redirect to=\"/popular\" />\n              </Switch>\n            </Suspense>\n          </QueryClientProvider>\n        </MainAppSt>\n      </Router>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nserviceWorker.register();\n"],"sourceRoot":""}