{"version":3,"sources":["shared/components/CardsWrapper.css.ts","hooks/useLocalStorage.ts","shared/components/Card/CardBodyText.css.ts","shared/components/Card/CardContentWrapper.css.ts","shared/components/Card/CardItem.css.ts","shared/components/Card/CardItemWrapper.css.ts","shared/components/Card/CardSubTitle.css.ts","shared/components/Card/CardTitle.css.ts","shared/components/Card/CardButton.css.ts","shared/features/RepoCard/RepoCard.tsx","utils/apiClient.ts","apiCalls/repo.ts","containers/PopularRepos/PopularRepos.dataQuery.ts","shared/components/Select/Select.tsx","containers/PopularRepos/PopularRepos.tsx","utils/utils.ts"],"names":["CardsWrapper","styled","ul","useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","CardBodyText","h2","inputColor","CardContentWrapper","div","CardItem","CardItemWrapper","li","CardSubTitle","a","CardTitle","CardButton","button","RepoCard","repoId","repoName","githubLink","description","numberOfStars","language","hasStarSupport","onStarClicked","isStarAvailable","setStarAvailable","handleRepoStared","useCallback","ev","href","target","rel","onClick","client","endpoint","body","customConfig","headers","config","method","fetch","response","json","data","ok","Error","statusText","Promise","reject","message","get","post","getLastWeekPopularRepos","filterDate","items","map","id","name","html_url","stargazers_count","dataQuery","fn","options","staleTime","refetchOnWindowFocus","refetchOnMount","Select","label","addSelectAllOption","onChange","currentSelection","selecion","setSelection","handleSelectionChange","content","option","indx","PopularRepos","lastWeeksDate","today","Date","getFullYear","getMonth","getDate","toISOString","split","getLastWeekDateFormatted","availableRepos","setAvailableRepos","useQuery","onSuccess","isLoading","isError","handleFilterRepoCallBack","filter","repo","starredItems","setStarredItems","handleStarRepoCallback","push","useEffect","languages","availableLanguages","Set","length"],"mappings":"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","file":"static/js/5.b2bee185.chunk.js","sourcesContent":["import styled from 'styled-components';\n\n/** CardsWrapper component used as a wrapper for Cards */\nexport const CardsWrapper = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n`;\n","import { useState } from 'react';\n\n// Hook useLocalStorage\nexport function useLocalStorage<T>(key: string, initialValue: T) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value: T | ((val: T) => T)) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n  return [storedValue, setValue] as const;\n}\n","import styled from 'styled-components';\n\n/** CardBodyText component used as a wrapper for Card body Text */\n\ninterface CardBodyTextProps {\n  inputColor?: string;\n}\nexport const CardBodyText = styled.h2<CardBodyTextProps>`\n  color: ${({ inputColor }) => inputColor || '#dadada'};\n  font-size: 1.1rem;\n`;\n","import styled from \"styled-components\";\n\n/** CardContentWrapper component used as a wrapper for Card Content */\nexport const CardContentWrapper = styled.div`\n  padding: 1rem;\n  height: 100%;\n`;\n","import styled from \"styled-components\";\n\n/** CardItem component used as a wrapper for single card */\nexport const CardItem = styled.div`\n  border-radius: 0.25rem;\n  box-shadow: 0 20px 40px -14px #1e1e1e;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  background-color: #c53e55;\n  &:hover {\n    -webkit-transform: scale(1.05);\n    -ms-transform: scale(1.05);\n    transform: scale(1.05);\n    cursor: pointer;\n  }\n`;\n","import styled from 'styled-components';\n\n/** CardItemWrapper component used as a wrapper for single card */\nexport const CardItemWrapper = styled.li`\n  display: grid;\n  padding: 1rem;\n  width: 100%;\n  @media (min-width: 40rem) {\n    width: 50%;\n  }\n  @media (min-width: 56rem) {\n    33.3333%;\n  }\n`;\n","import styled from 'styled-components';\n\n/** CardSubtitle component used as a wrapper for Card Subtitle */\n\ninterface CardBodyTextProps {\n  inputColor?: string;\n}\nexport const CardSubTitle = styled.a<CardBodyTextProps>`\n  color: ${({ inputColor }) => inputColor || '#dadada'};\n  font-size: 1rem;\n  line-height: 1.5;\n  margin-bottom: 1.25rem;\n  font-weight: 400;\n`;\n","import styled from \"styled-components\";\n\n/** CardTitle component used as a wrapper for Card Title */\n\ninterface CardBodyTextProps {\n    inputColor?: string;\n  }\n\nexport const CardTitle = styled.h2<CardBodyTextProps>`\n  font-size: 1.5rem;\n  font-weight: bold;\n  letter-spacing: 1px;\n  text-transform: capitalize;\n  margin: 0px;\n  color: ${({ inputColor }) => inputColor || '#dadada'};\n`;\n","import styled from 'styled-components';\n\n/** CardButton component used as a wrapper for Card Button */\n\nexport const CardButton = styled.button`\n`;\n","import { ReactElement, useCallback, useState } from 'react';\nimport { RepoInfo } from 'src/apiCalls/repo';\nimport { CardBodyText } from 'src/shared/components/Card/CardBodyText.css';\nimport { CardContentWrapper } from 'src/shared/components/Card/CardContentWrapper.css';\nimport { CardItem } from 'src/shared/components/Card/CardItem.css';\nimport { CardItemWrapper } from 'src/shared/components/Card/CardItemWrapper.css';\nimport { CardSubTitle } from 'src/shared/components/Card/CardSubTitle.css';\nimport { CardTitle } from 'src/shared/components/Card/CardTitle.css';\nimport { CardButton } from 'src/shared/components/Card/CardButton.css';\n\ninterface RepoCardProps extends RepoInfo {\n  hasStarSupport?: boolean;\n  onStarClicked?: Function;\n}\nconst RepoCard = ({\n  repoId,\n  repoName,\n  githubLink,\n  description,\n  numberOfStars,\n  language,\n  hasStarSupport,\n  onStarClicked,\n}: RepoCardProps): ReactElement => {\n  const [isStarAvailable, setStarAvailable] = useState(hasStarSupport);\n  const handleRepoStared = useCallback(\n    (ev) => {\n      onStarClicked &&\n        onStarClicked({\n          repoId,\n          repoName,\n          githubLink,\n          description,\n          numberOfStars,\n          language,\n        });\n      setStarAvailable(false);\n    },\n    [\n      repoId,\n      repoName,\n      githubLink,\n      description,\n      numberOfStars,\n      language,\n      onStarClicked,\n    ]\n  );\n  return (\n    <CardItemWrapper key={repoId}>\n      <CardItem>\n        <CardContentWrapper>\n          <CardTitle>{repoName}</CardTitle>\n          <CardSubTitle href={githubLink} target={'_blank'} rel={'noopener'}>\n            {githubLink}\n          </CardSubTitle>\n          <CardBodyText>{description}</CardBodyText>\n          <CardBodyText>Number of Stars: {numberOfStars}</CardBodyText>\n          {isStarAvailable && (\n            <CardButton onClick={handleRepoStared}>Star Repo</CardButton>\n          )}\n        </CardContentWrapper>\n      </CardItem>\n    </CardItemWrapper>\n  );\n};\n\nexport default RepoCard;\n","/* eslint-disable */\n// A tiny wrapper around fetch(), borrowed from\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\nexport async function client(endpoint: string, { body, ...customConfig } = {} as any) {\n  const headers = { 'Content-Type': 'application/json' };\n\n  const config = {\n    method: body ? 'POST' : 'GET',\n    ...customConfig,\n    headers: {\n      ...headers,\n      ...customConfig.headers,\n    },\n  };\n\n  if (body) {\n    config.body = JSON.stringify(body);\n  }\n\n  let data;\n  try {\n    const response = await window.fetch(endpoint, config);\n    data = await response.json();\n    if (response.ok) {\n      return data;\n    }\n    throw new Error(response.statusText);\n  } catch (err) {\n    return Promise.reject(err.message ? err.message : data);\n  }\n}\n\nclient.get = function (endpoint: any, customConfig = {}) {\n  return client(endpoint, { ...customConfig, method: 'GET' });\n};\n\nclient.post = function (endpoint: any, body: any, customConfig = {}) {\n  return client(endpoint, { ...customConfig, body, method: 'POST' });\n};\n\n","import { client } from 'src/utils/apiClient';\n\nexport interface RepoInfo {\n  repoId: number;\n  repoName: string;\n  githubLink: string;\n  description: string;\n  numberOfStars: number;\n  language?: string;\n}\n\nexport const getLastWeekPopularRepos = async (filterDate: string): Promise<any> => {\n  const data = await client(\n    `https://api.github.com/search/repositories?q=created:%3E${filterDate}&sort=stars&order=desc`\n  );\n  return data.items.map((item: any) => {\n    return {\n      repoId: item.id,\n      repoName: item.name,\n      githubLink: item.html_url,\n      description: item.description,\n      numberOfStars: item.stargazers_count,\n      language: item.language\n    };\n  });\n};\n","import { getLastWeekPopularRepos } from 'src/apiCalls/repo';\n\nconst QUERY_NAME = 'popular-repos-data';\n\nconst DataQueryFn = (filterDate: string): Promise<any> => {\n  return getLastWeekPopularRepos(filterDate);\n};\n\nconst DataQueryOptions = {\n  staleTime: 5000,\n  refetchOnWindowFocus: false,\n  refetchOnMount: false,\n};\n\nconst dataQuery = {\n  name: QUERY_NAME,\n  fn: DataQueryFn,\n  options: DataQueryOptions,\n};\n\nexport default dataQuery;\n","import { ReactElement, useCallback, useState } from 'react';\ninterface SelectInputProps {\n  label: string;\n  options: string[];\n  addSelectAllOption: boolean;\n  onChange: Function;\n  currentSelection: string;\n}\n\nconst Select = ({\n  label,\n  options,\n  addSelectAllOption,\n  onChange,\n  currentSelection,\n}: SelectInputProps): ReactElement => {\n  const [selecion, setSelection] = useState(currentSelection);\n\n  const handleSelectionChange = useCallback((ev) => {\n    setSelection(ev.target.value);\n    onChange(ev);\n  }, [onChange]);\n\n  const content = options.map((option: string, indx: number) => (\n    <option key={indx} value={option}>\n      {option}\n    </option>\n  ));\n  return (\n    <label>\n      {label}\n      <select value={selecion} onChange={handleSelectionChange}>\n        {addSelectAllOption ? <option value=\"all\">all</option> : null}\n        {content}\n      </select>\n    </label>\n  );\n};\n\nexport default Select;\n","import React, {\n  Fragment,\n  ReactElement,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react';\nimport { CardsWrapper } from 'src/shared/components/CardsWrapper.css';\nimport RepoCard from 'src/shared/features/RepoCard/RepoCard';\nimport { useQuery } from 'react-query';\nimport dataQuery from './PopularRepos.dataQuery';\nimport { RepoInfo } from 'src/apiCalls/repo';\nimport { getLastWeekDateFormatted } from 'src/utils/utils';\nimport Select from 'src/shared/components/Select/Select';\nimport { useLocalStorage } from 'src/hooks/useLocalStorage';\n\nconst PopularRepos = (): ReactElement => {\n  const lastWeeksDate = getLastWeekDateFormatted();\n  const [availableRepos, setAvailableRepos] = useState([]);\n  const { isLoading, isError, data } = useQuery(\n    dataQuery.name,\n    () => dataQuery.fn(lastWeeksDate),\n    {\n      ...dataQuery.options,\n      onSuccess: (data) => setAvailableRepos(data),\n    }\n  );\n\n  const handleFilterRepoCallBack = useCallback(\n    (language) => {\n      setAvailableRepos(\n        language === 'all'\n          ? data\n          : data.filter(\n              (repo: RepoInfo) => repo.language && repo.language === language\n            )\n      );\n    },\n    [setAvailableRepos, data]\n  );\n\n  const [starredItems, setStarredItems] = useLocalStorage<RepoInfo[]>(\n    'starred',\n    []\n  );\n\n  const handleStarRepoCallback = useCallback(\n    (repo: RepoInfo) => {\n      starredItems.push(repo);\n      setStarredItems(starredItems);\n    },\n    [starredItems, setStarredItems]\n  );\n\n  useEffect(() => {\n    setAvailableRepos(data);\n  }, [data]);\n\n  if (isLoading) {\n    return <div>Loading</div>;\n  }\n  if (isError) {\n    // report {error} to error service here\n    return <div>error</div>;\n  }\n\n  const languages: string[] = data\n    .filter((repo: RepoInfo) => repo.language)\n    .map((repo: RepoInfo) => repo.language);\n  const availableLanguages: string[] = [...new Set(languages)];\n  return (\n    <Fragment>\n      <h1>Popular Repos from {lastWeeksDate}</h1>\n      <Select\n        addSelectAllOption={true}\n        currentSelection={'all'}\n        label=\"languages\"\n        options={availableLanguages}\n        onChange={(ev: any) => {\n          handleFilterRepoCallBack(ev.target.value);\n        }}\n      ></Select>\n      <CardsWrapper>\n        {availableRepos.map((repo: RepoInfo) => (\n          <RepoCard\n            key={repo.repoId}\n            repoId={repo.repoId}\n            description={repo.description}\n            githubLink={repo.githubLink}\n            repoName={repo.repoName}\n            numberOfStars={repo.numberOfStars}\n            hasStarSupport={\n              starredItems.filter((item) => {\n                return item.repoId === repo.repoId;\n              }).length === 0\n            }\n            onStarClicked={handleStarRepoCallback}\n          />\n        ))}\n      </CardsWrapper>\n    </Fragment>\n  );\n};\n\nexport default PopularRepos;\n","export function getLastWeekDateFormatted(){\n    var today = new Date();\n    var lastweek = new Date(today.getFullYear(), today.getMonth(), today.getDate()-7);\n    return lastweek.toISOString().split('T')[0];\n}"],"sourceRoot":""}