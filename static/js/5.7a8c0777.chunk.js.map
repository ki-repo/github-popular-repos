{"version":3,"sources":["shared/components/CardsWrapper.css.ts","hooks/useLocalStorage.ts","shared/components/Card/CardBodyText.css.ts","shared/components/Card/CardContentWrapper.css.ts","shared/components/Card/CardItem.css.ts","shared/components/Card/CardItemWrapper.css.ts","shared/components/Card/CardSubTitle.css.ts","shared/components/Card/CardTitle.css.ts","shared/components/Card/CardButton.css.ts","shared/features/RepoCard/RepoCard.tsx","utils/apiClient.ts","apiCalls/repo.ts","containers/PopularRepos/PopularRepos.dataQuery.ts","shared/components/Select/Select.tsx","containers/PopularRepos/PopularRepos.tsx","utils/utils.ts"],"names":["CardsWrapper","styled","ul","useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","CardBodyText","h2","inputColor","CardContentWrapper","div","CardItem","CardItemWrapper","li","CardSubTitle","a","CardTitle","CardButton","button","RepoCard","repoId","repoName","githubLink","description","numberOfStars","language","hasStarSupport","onStarClicked","isStarAvailable","setStarAvailable","handleRepoStared","useCallback","ev","href","target","rel","onClick","client","endpoint","body","customConfig","headers","config","method","fetch","response","json","data","ok","Error","statusText","Promise","reject","message","get","post","getLastWeekPopularRepos","filterDate","items","map","id","name","html_url","stargazers_count","dataQuery","fn","options","staleTime","refetchOnWindowFocus","refetchOnMount","Select","label","addSelectAllOption","onChange","currentSelection","selecion","setSelection","handleSelectionChange","content","option","indx","PopularRepos","lastWeeksDate","today","Date","getFullYear","getMonth","getDate","toISOString","split","getLastWeekDateFormatted","availableRepos","setAvailableRepos","useQuery","onSuccess","isLoading","isError","handleFilterRepoCallBack","filter","repo","starredItems","setStarredItems","handleStarRepoCallback","push","useEffect","availableLanguages","length"],"mappings":"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","file":"static/js/5.7a8c0777.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\n/** CardsWrapper component used as a wrapper for Cards */\r\nexport const CardsWrapper = styled.ul`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  list-style: none;\r\n  margin: 0;\r\n  padding: 0;\r\n`;\r\n","import { useState } from 'react';\r\n\r\n// Hook useLocalStorage\r\nexport function useLocalStorage<T>(key: string, initialValue: T) {\r\n  // State to store our value\r\n  // Pass initial state function to useState so logic is only executed once\r\n  const [storedValue, setStoredValue] = useState<T>(() => {\r\n    try {\r\n      // Get from local storage by key\r\n      const item = window.localStorage.getItem(key);\r\n      // Parse stored json or if none return initialValue\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      // If error also return initialValue\r\n      console.log(error);\r\n      return initialValue;\r\n    }\r\n  });\r\n  // Return a wrapped version of useState's setter function that ...\r\n  // ... persists the new value to localStorage.\r\n  const setValue = (value: T | ((val: T) => T)) => {\r\n    try {\r\n      // Allow value to be a function so we have same API as useState\r\n      const valueToStore =\r\n        value instanceof Function ? value(storedValue) : value;\r\n      // Save state\r\n      setStoredValue(valueToStore);\r\n      // Save to local storage\r\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      // A more advanced implementation would handle the error case\r\n      console.log(error);\r\n    }\r\n  };\r\n  return [storedValue, setValue] as const;\r\n}\r\n","import styled from 'styled-components';\r\n\r\n/** CardBodyText component used as a wrapper for Card body Text */\r\n\r\ninterface CardBodyTextProps {\r\n  inputColor?: string;\r\n}\r\nexport const CardBodyText = styled.h2<CardBodyTextProps>`\r\n  color: ${({ inputColor }) => inputColor || '#dadada'};\r\n  font-size: 1.1rem;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\n/** CardContentWrapper component used as a wrapper for Card Content */\r\nexport const CardContentWrapper = styled.div`\r\n  padding: 1rem;\r\n  height: 100%;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\n/** CardItem component used as a wrapper for single card */\r\nexport const CardItem = styled.div`\r\n  border-radius: 0.25rem;\r\n  box-shadow: 0 20px 40px -14px #1e1e1e;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n  background-color: #c53e55;\r\n  &:hover {\r\n    -webkit-transform: scale(1.05);\r\n    -ms-transform: scale(1.05);\r\n    transform: scale(1.05);\r\n    cursor: pointer;\r\n  }\r\n`;\r\n","import styled from 'styled-components';\r\n\r\n/** CardItemWrapper component used as a wrapper for single card */\r\nexport const CardItemWrapper = styled.li`\r\n  display: grid;\r\n  padding: 1rem;\r\n  width: 100%;\r\n  @media (min-width: 40rem) {\r\n    width: 50%;\r\n  }\r\n  @media (min-width: 56rem) {\r\n    33.3333%;\r\n  }\r\n`;\r\n","import styled from 'styled-components';\r\n\r\n/** CardSubtitle component used as a wrapper for Card Subtitle */\r\n\r\ninterface CardBodyTextProps {\r\n  inputColor?: string;\r\n}\r\nexport const CardSubTitle = styled.a<CardBodyTextProps>`\r\n  color: ${({ inputColor }) => inputColor || '#dadada'};\r\n  font-size: 1rem;\r\n  line-height: 1.5;\r\n  margin-bottom: 1.25rem;\r\n  font-weight: 400;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\n/** CardTitle component used as a wrapper for Card Title */\r\n\r\ninterface CardBodyTextProps {\r\n    inputColor?: string;\r\n  }\r\n\r\nexport const CardTitle = styled.h2<CardBodyTextProps>`\r\n  font-size: 1.5rem;\r\n  font-weight: bold;\r\n  letter-spacing: 1px;\r\n  text-transform: capitalize;\r\n  margin: 0px;\r\n  color: ${({ inputColor }) => inputColor || '#dadada'};\r\n`;\r\n","import styled from 'styled-components';\r\n\r\n/** CardButton component used as a wrapper for Card Button */\r\n\r\nexport const CardButton = styled.button`\r\n`;\r\n","import { ReactElement, useCallback, useState } from 'react';\r\nimport { RepoInfo } from 'src/apiCalls/repo';\r\nimport { CardBodyText } from 'src/shared/components/Card/CardBodyText.css';\r\nimport { CardContentWrapper } from 'src/shared/components/Card/CardContentWrapper.css';\r\nimport { CardItem } from 'src/shared/components/Card/CardItem.css';\r\nimport { CardItemWrapper } from 'src/shared/components/Card/CardItemWrapper.css';\r\nimport { CardSubTitle } from 'src/shared/components/Card/CardSubTitle.css';\r\nimport { CardTitle } from 'src/shared/components/Card/CardTitle.css';\r\nimport { CardButton } from 'src/shared/components/Card/CardButton.css';\r\n\r\ninterface RepoCardProps extends RepoInfo {\r\n  hasStarSupport?: boolean;\r\n  onStarClicked?: Function;\r\n}\r\nconst RepoCard = ({\r\n  repoId,\r\n  repoName,\r\n  githubLink,\r\n  description,\r\n  numberOfStars,\r\n  language,\r\n  hasStarSupport,\r\n  onStarClicked,\r\n}: RepoCardProps): ReactElement => {\r\n  const [isStarAvailable, setStarAvailable] = useState(hasStarSupport);\r\n  const handleRepoStared = useCallback(\r\n    (ev) => {\r\n      onStarClicked &&\r\n        onStarClicked({\r\n          repoId,\r\n          repoName,\r\n          githubLink,\r\n          description,\r\n          numberOfStars,\r\n          language,\r\n        });\r\n      setStarAvailable(false);\r\n    },\r\n    [\r\n      repoId,\r\n      repoName,\r\n      githubLink,\r\n      description,\r\n      numberOfStars,\r\n      language,\r\n      onStarClicked,\r\n    ]\r\n  );\r\n  return (\r\n    <CardItemWrapper key={repoId}>\r\n      <CardItem>\r\n        <CardContentWrapper>\r\n          <CardTitle>{repoName}</CardTitle>\r\n          <CardSubTitle href={githubLink} target={'_blank'} rel={'noopener'}>\r\n            {githubLink}\r\n          </CardSubTitle>\r\n          <CardBodyText>{description}</CardBodyText>\r\n          <CardBodyText>Number of Stars: {numberOfStars}</CardBodyText>\r\n          {isStarAvailable && (\r\n            <CardButton onClick={handleRepoStared}>Star Repo</CardButton>\r\n          )}\r\n        </CardContentWrapper>\r\n      </CardItem>\r\n    </CardItemWrapper>\r\n  );\r\n};\r\n\r\nexport default RepoCard;\r\n","/* eslint-disable */\r\n// A tiny wrapper around fetch(), borrowed from\r\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\r\nexport async function client(endpoint: string, { body, ...customConfig } = {} as any) {\r\n  const headers = { 'Content-Type': 'application/json' };\r\n\r\n  const config = {\r\n    method: body ? 'POST' : 'GET',\r\n    ...customConfig,\r\n    headers: {\r\n      ...headers,\r\n      ...customConfig.headers,\r\n    },\r\n  };\r\n\r\n  if (body) {\r\n    config.body = JSON.stringify(body);\r\n  }\r\n\r\n  let data;\r\n  try {\r\n    const response = await window.fetch(endpoint, config);\r\n    data = await response.json();\r\n    if (response.ok) {\r\n      return data;\r\n    }\r\n    throw new Error(response.statusText);\r\n  } catch (err) {\r\n    return Promise.reject(err.message ? err.message : data);\r\n  }\r\n}\r\n\r\nclient.get = function (endpoint: any, customConfig = {}) {\r\n  return client(endpoint, { ...customConfig, method: 'GET' });\r\n};\r\n\r\nclient.post = function (endpoint: any, body: any, customConfig = {}) {\r\n  return client(endpoint, { ...customConfig, body, method: 'POST' });\r\n};\r\n\r\n","import { client } from 'src/utils/apiClient';\r\n\r\nexport interface RepoInfo {\r\n  repoId: number;\r\n  repoName: string;\r\n  githubLink: string;\r\n  description: string;\r\n  numberOfStars: number;\r\n  language?: string;\r\n}\r\n\r\nexport const getLastWeekPopularRepos = async (filterDate: string): Promise<any> => {\r\n  const data = await client(\r\n    `https://api.github.com/search/repositories?q=created:%3E${filterDate}&sort=stars&order=desc`\r\n  );\r\n  return data.items.map((item: any) => {\r\n    return {\r\n      repoId: item.id,\r\n      repoName: item.name,\r\n      githubLink: item.html_url,\r\n      description: item.description,\r\n      numberOfStars: item.stargazers_count,\r\n      language: item.language\r\n    };\r\n  });\r\n};\r\n","import { getLastWeekPopularRepos } from 'src/apiCalls/repo';\r\n\r\nconst QUERY_NAME = 'popular-repos-data';\r\n\r\nconst DataQueryFn = (filterDate: string): Promise<any> => {\r\n  return getLastWeekPopularRepos(filterDate);\r\n};\r\n\r\nconst DataQueryOptions = {\r\n  staleTime: 5000,\r\n  refetchOnWindowFocus: false,\r\n  refetchOnMount: false,\r\n};\r\n\r\nconst dataQuery = {\r\n  name: QUERY_NAME,\r\n  fn: DataQueryFn,\r\n  options: DataQueryOptions,\r\n};\r\n\r\nexport default dataQuery;\r\n","import { ReactElement, useCallback, useState } from 'react';\r\ninterface SelectInputProps {\r\n  label: string;\r\n  options: string[];\r\n  addSelectAllOption: boolean;\r\n  onChange: Function;\r\n  currentSelection: string;\r\n}\r\n\r\nconst Select = ({\r\n  label,\r\n  options,\r\n  addSelectAllOption,\r\n  onChange,\r\n  currentSelection,\r\n}: SelectInputProps): ReactElement => {\r\n  const [selecion, setSelection] = useState(currentSelection);\r\n\r\n  const handleSelectionChange = useCallback((ev) => {\r\n    setSelection(ev.target.value);\r\n    onChange(ev);\r\n  }, [onChange]);\r\n\r\n  const content = options.map((option: string, indx: number) => (\r\n    <option key={indx} value={option}>\r\n      {option}\r\n    </option>\r\n  ));\r\n  return (\r\n    <label>\r\n      {label}\r\n      <select value={selecion} onChange={handleSelectionChange}>\r\n        {addSelectAllOption ? <option value=\"all\">all</option> : null}\r\n        {content}\r\n      </select>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Select;\r\n","import React, {\r\n  Fragment,\r\n  ReactElement,\r\n  useCallback,\r\n  useEffect,\r\n  useState,\r\n} from 'react';\r\nimport { CardsWrapper } from 'src/shared/components/CardsWrapper.css';\r\nimport RepoCard from 'src/shared/features/RepoCard/RepoCard';\r\nimport { useQuery } from 'react-query';\r\nimport dataQuery from './PopularRepos.dataQuery';\r\nimport { RepoInfo } from 'src/apiCalls/repo';\r\nimport { getLastWeekDateFormatted } from 'src/utils/utils';\r\nimport Select from 'src/shared/components/Select/Select';\r\nimport { useLocalStorage } from 'src/hooks/useLocalStorage';\r\n\r\nconst PopularRepos = (): ReactElement => {\r\n  const lastWeeksDate = getLastWeekDateFormatted();\r\n  const [availableRepos, setAvailableRepos] = useState([]);\r\n  const { isLoading, isError, data } = useQuery(\r\n    dataQuery.name,\r\n    () => dataQuery.fn(lastWeeksDate),\r\n    {\r\n      ...dataQuery.options,\r\n      onSuccess: (data) => setAvailableRepos(data),\r\n    }\r\n  );\r\n\r\n  const handleFilterRepoCallBack = useCallback(\r\n    (language) => {\r\n      setAvailableRepos(\r\n        language === 'all'\r\n          ? data\r\n          : data.filter(\r\n              (repo: RepoInfo) => repo.language && repo.language === language\r\n            )\r\n      );\r\n    },\r\n    [setAvailableRepos, data]\r\n  );\r\n\r\n  const [starredItems, setStarredItems] = useLocalStorage<RepoInfo[]>(\r\n    'starred',\r\n    []\r\n  );\r\n\r\n  const handleStarRepoCallback = useCallback(\r\n    (repo: RepoInfo) => {\r\n      starredItems.push(repo);\r\n      setStarredItems(starredItems);\r\n    },\r\n    [starredItems, setStarredItems]\r\n  );\r\n\r\n  useEffect(() => {\r\n    setAvailableRepos(data);\r\n  }, [data]);\r\n\r\n  if (isLoading) {\r\n    return <div>Loading</div>;\r\n  }\r\n  if (isError) {\r\n    // report {error} to error service here\r\n    return <div>error</div>;\r\n  }\r\n\r\n  const availableLanguages: string[] = data\r\n    .filter((repo: RepoInfo) => repo.language)\r\n    .map((repo: RepoInfo) => repo.language);\r\n\r\n  return (\r\n    <Fragment>\r\n      <h1>Popular Repos from {lastWeeksDate}</h1>\r\n      <Select\r\n        addSelectAllOption={true}\r\n        currentSelection={'all'}\r\n        label=\"languages\"\r\n        options={availableLanguages}\r\n        onChange={(ev: any) => {\r\n          handleFilterRepoCallBack(ev.target.value);\r\n        }}\r\n      ></Select>\r\n      <CardsWrapper>\r\n        {availableRepos.map((repo: RepoInfo) => (\r\n          <RepoCard\r\n            key={repo.repoId}\r\n            repoId={repo.repoId}\r\n            description={repo.description}\r\n            githubLink={repo.githubLink}\r\n            repoName={repo.repoName}\r\n            numberOfStars={repo.numberOfStars}\r\n            hasStarSupport={\r\n              starredItems.filter((item) => {\r\n                return item.repoId === repo.repoId;\r\n              }).length === 0\r\n            }\r\n            onStarClicked={handleStarRepoCallback}\r\n          />\r\n        ))}\r\n      </CardsWrapper>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default PopularRepos;\r\n","export function getLastWeekDateFormatted(){\r\n    var today = new Date();\r\n    var lastweek = new Date(today.getFullYear(), today.getMonth(), today.getDate()-7);\r\n    return lastweek.toISOString().split('T')[0];\r\n}"],"sourceRoot":""}